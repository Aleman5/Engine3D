#version 330 core

#define RADIAN_LIMIT 2.1
#define AMBIENT 0.1
#define SHADES 5.0

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Normal;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform vec3 iLightDir;
uniform vec3 iCameraGlobalPos;
uniform vec3 iCameraFwd;
uniform float iRadianLimit;

float RadiansFromNormal()
{
	return acos( dot(iCameraFwd, Normal) );
}

vec3 ComputeLighting(vec3 point, vec3 lightColor)
{
    float intensity = dot(Normal, normalize(iLightDir));
    intensity = ceil(intensity * SHADES) / SHADES;
    intensity = max(intensity, AMBIENT);
    return lightColor * intensity;
}

void main()
{
    if (RadiansFromNormal() < iRadianLimit) // Edge hit
        color = vec4(0.0);
	else
		color = vec4( ComputeLighting(iCameraGlobalPos, texture(myTextureSampler, UV).rgb), 1.0 );
}