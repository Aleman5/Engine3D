#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;

// Output data ; will be interpolated for each fragment.
out vec3 Position;
out vec2 UV;
out vec3 Normal;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 ModelMatrix;
uniform vec3 iCameraGlobalPos;

varying vec3 varyingNormalDirection; // normalized surface normal vector
varying vec3 varyingViewDirection;   // normalized view direction 

void main(){
	mat4 modelMatrix = ModelMatrix;
	mat4 invModelMatrix = inverse(modelMatrix);

	varyingNormalDirection = normalize(vec3(vec4(vertexNormal, 0.0) * modelMatrixInverse));

    varyingViewDirection = normalize(iCameraGlobalPos - vec3(modelMatrix * vec4(vertexPosition_modelspace,1.0f)));

    gl_Position = MVP * gl_Vertex;

    // Output position of the vertex, in clip space : MVP * position
    //gl_Position =  MVP * vec4(vertexPosition_modelspace,1.0f);

    // UV and Normal of the vertex.
	Position = vertexPosition_modelspace;
    UV = vertexUV;
	Normal = vertexNormal;
}